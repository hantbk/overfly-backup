#!/usr/bin/env sh

set -u

type curl > /dev/null || { echo "curl: not found"; exit 1; }

set -e

get_latest_release() {
  local repo="$1"
	curl -sSL "https://api.github.com/repos/${repo}/releases/latest" | \
    awk 'BEGIN{FS=": |,|\""}; /tag_name/{print $5}'
}

repo="hantbk/vtsbackup"
version="$(get_latest_release "${repo}")" 

# if args has version override it and not eq "latest"
if test $# -eq 1; then
  if test "$1" != "latest"; then
     version="$1"

     echo "Install ${version}"
  fi
fi

platform="$(uname | tr "[A-Z]" "[a-z]")"  # Linux => linux
arch="$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')" # x86_64 => amd64, aarch64 => arm64

package="vtsbackup-${platform}-${arch}.tar.gz"
package_url="https://github.com/${repo}/releases/download/${version}/${package}"
bin="vtsbackup"
dest_dir="/usr/local/bin"
bin_path="${dest_dir}/${bin}"
tmp_dir="$(mktemp -d)"

trap "rm -r ${tmp_dir}" EXIT

if test -e "${bin_path}"; then
   current_version="v$("${bin_path}" -v | awk '{print $NF}')"
   if test "${current_version}" = "${version}"; then
     echo "${bin} is already updated, no need to upgrade."
     exit 0
   else
     echo "There is a new version of ${bin}, starting to upgrade from ${current_version} to ${version}."
   fi
fi

cd "${tmp_dir}"
curl -sSL "${package_url}" | tar xzf -

if test $(id -u) -eq 0; then
   mv "${bin}" "${dest_dir}"
else
   sudo mv "${bin}" "${dest_dir}"
fi

mkdir -p ~/.vtsbackup

cat <<EOF> ~/.vtsbackup/vtsbackup.yml
# Default VTSBackup configuration
models:
  default:
    description: "Default backup scenario"
    archive:
      includes:
        - /path/to/backup/  # Replace with actual path
    schedule:
      cron: "0 0 * * *"  # Run daily at midnight
    compress_with:
      type: tgz
    storages:
      local:
        type: local
        path: /path/to/local/backups  # Replace with actual path
      minio:
        type: minio
        bucket: your-bucket-name  # Replace with actual bucket name
        endpoint: http://your-minio-endpoint:9000  # Replace with actual endpoint
        path: backups
        access_key_id: ${MINIO_ACCESS_KEY_ID}
        secret_access_key: ${MINIO_SECRET_ACCESS_KEY}
EOF

cat <<EOF > ~/.vtsbackup/snapshot.conf
#
#	VTSBACKUP CONFIG FILE
#
#	This file should live as ~/.vtsbackup/snapshot.conf

# What to Backup
# Select the directory to backup
BACKUP_PATH=/

# Excluding Files
# Add any files and folders to be exlcuded to the list below
EXCLUDE_LIST= "/mnt/backup "

# Disk to write backup to
# This is the disk that the backup will be stored on
# Use "/" to save backup to your root disk
DEST_DISK=/mnt/backup

# Conststant Backup Path
# By default, the backup path is supplied as an argument but you
# can specify a constant one here, include mount point in the path
FILE_PATH=/mnt/backup/vtsbackup

# Backup File Name
# This is the name the backup file will have
# By default, it's in a form like: Backup--2024-9-24
FILE_NAME=Backup

# Compression
# Compression is enabled by default
# This can be resource intensive
COMPRESSION=false

# Auto Unmount
# Automatically unmount the backup disk
# THIS WILL BE FORCED TO FALSE IF BACKING UP TO ROOT DISK ("/")
AUTOUNMOUNT=false
EOF

echo "${bin} ${version} has been installed."