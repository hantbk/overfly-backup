#!/usr/bin/env sh

set -u

type curl > /dev/null || { echo "curl: not found"; exit 1; }

set -e

get_latest_release() {
  local repo="$1"
	curl -sSL "https://api.github.com/repos/${repo}/releases/latest" | \
    awk 'BEGIN{FS=": |,|\""}; /tag_name/{print $5}'
}

repo="hantbk/vtsbackup"
version="$(get_latest_release "${repo}")" 

# if args has version override it and not eq "latest"
if test $# -eq 1; then
  if test "$1" != "latest"; then
     version="$1"

     echo "Install ${version}"
  fi
fi

platform="$(uname | tr "[A-Z]" "[a-z]")"  # Linux => linux
arch="$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')" # x86_64 => amd64, aarch64 => arm64

package="vtsbackup-${platform}-${arch}.tar.gz"
package_url="https://github.com/${repo}/releases/download/${version}/${package}"
bin="vtsbackup"
dest_dir="/usr/local/bin"
bin_path="${dest_dir}/${bin}"
tmp_dir="$(mktemp -d)"

trap "rm -r ${tmp_dir}" EXIT

if test -e "${bin_path}"; then
   current_version="v$("${bin_path}" -v | awk '{print $NF}')"
   if test "${current_version}" = "${version}"; then
     echo "${bin} is already updated, no need to upgrade."
     exit 0
   else
     echo "There is a new version of ${bin}, starting to upgrade from ${current_version} to ${version}."
   fi
fi

cd "${tmp_dir}"
curl -sSL "${package_url}" | tar xzf -

if test $(id -u) -eq 0; then
   mv "${bin}" "${dest_dir}"
else
   sudo mv "${bin}" "${dest_dir}"
fi

mkdir -p ~/.vtsbackup

cat <<EOF> ~/.vtsbackup/vtsbackup.yml
# Default VTSBackup configuration
models:
  default:
    description: "Default backup task"
    archive:
      includes:
        - /home/vts/points  # Replace with actual path
    schedule:
      cron: "0 0 * * *"  # Run daily at midnight
    compress_with:
      type: tgz
    storages:
      minio:
        type: minio
        keep: 3
        bucket: vtsbackup-test  # Replace with actual bucket name
        endpoint: http://127.0.0.1:9000  # Replace with actual endpoint
        path: backups
        access_key_id: test-user
        secret_access_key: test-user-secret
EOF

echo "${bin} ${version} has been installed."